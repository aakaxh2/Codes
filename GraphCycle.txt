								[1] Cycle in {undirected} graph
NOTE : o/p is YES or NO (using bfs)
CODE : 
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long
#define pb push_back
const int N=10005;

vector<int>v[N];
int vis[N],par[N];

bool bfs(int x)
{
    queue<int>q;
    q.push(x);
    vis[x]=1;
    
    while(!q.empty())
    {
        int z=q.front();
        q.pop();
        
        for(int i : v[z])
        {
            if(vis[i]==0) {
                q.push(i);
                vis[i]=1;
                par[i]=z;
            }
            else {
                if(par[z]!=i) return true;
            }
        }
    }
    return false;
}

signed main() 
{IOS;
    
    int n,m;
    cin>>n>>m;
    
    for(int i=1;i<=m;++i) {
        int x,y;
        cin>>x>>y;
        v[x].pb(y);
        v[y].pb(x);
    }
    
    memset(par,-1,sizeof(par));
    
    for(int i=1;i<=n;++i)
    {
        if(vis[i]==0 && bfs(i)){
            cout<<"yup\n";
            exit(0);
        }
    }
    
    cout<<"No :(\n";
}


								[2] Cycle in { Directed } graph
NOTE : o/p is YES or NO (using dfs color method) 
CODE : 
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long
#define pb push_back
const int N=10005;

vector<int>v[N];
int vis[N];

// 0 white 
// 1 grey
// 2 black

bool dfs(int x)
{
    vis[x]=1;
    
    for(int i : v[x])
    {
        if(vis[i]==1) return true;
        
        if(vis[i]==0 && dfs(i)) return true;
    }
    
    vis[x]=2;
    return false;
}

signed main() 
{IOS;
    
    int n,m;
    cin>>n>>m;
    
    for(int i=1;i<=m;++i) {
        int x,y;
        cin>>x>>y;
        v[x].pb(y);
        // v[y].pb(x);
    }
    
    for(int i=1;i<=n;++i)
    {
        if(vis[i]==0 && dfs(i)){
            cout<<"yup\n";
            exit(0);
        }
    }
    
    cout<<"No :(\n";
}



								[3] Count of cycles

NOTE : o/p [ cycle ] (using dfs color method // same as [2])
CODE : 
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long
#define pb push_back
const int N=10005;

vector<int>v[N];
int vis[N],par[N];
int cycle=0;

// 0 white 
// 1 grey
// 2 black

void dfs(int x, int pr)
{
    if(vis[x]==2) return;
    if(vis[x]==1) 
    {
        cycle++;
        return;
    }
    
    par[x]=pr;
    vis[x]=1;
    
    for(int i : v[x])
    {
        if(i==par[x]) continue;
        dfs(i,x);
    }
    vis[x]=2;
}

signed main() 
{IOS;
    
    int n,m;
    cin>>n>>m;
    
    for(int i=1;i<=m;++i) {
        int x,y;
        cin>>x>>y;
        v[x].pb(y);
        v[y].pb(x);
    }
    
    dfs(1,-1);
    
    cout<<"Loops are : "<<cycle<<endl;
}


								[4] Print all Cycles

NOTE : o/p all cycles (extended version of part [3] // using dfs color method)
CODE : 
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long
#define pb push_back
const int N=10005;

vector<int>v[N],pt[N];
int vis[N],par[N],path[N];
int cycle=0;

// 0 white 
// 1 grey
// 2 black

void dfs(int x, int pr)
{
    if(vis[x]==2) return;
    if(vis[x]==1) 
    {
        cycle++;
        
        // save path details
        int cur=pr;
        path[cur]=cycle;
        while(cur!=x)
        {
            cur=par[cur];
            path[cur]=cycle;
        }
        
        return;
    }
    
    par[x]=pr;
    vis[x]=1;
    
    for(int i : v[x])
    {
        if(i==par[x]) continue;
        dfs(i,x);
    }
    vis[x]=2;
}

void printPath(int n)
{
    for(int i=1;i<=n;++i) {
        pt[path[i]].pb(i);
    }
    
    for(int i=1;i<=cycle;++i) {
        cout<<"Cycle No. "<<i<<" is : ";
        for(int j : pt[i])
        {
            cout<<j<<" ";
        }
        cout<<endl;
    }
}

signed main() 
{IOS;
    
    int n,m;
    cin>>n>>m;
    
    for(int i=1;i<=m;++i) {
        int x,y;
        cin>>x>>y;
        v[x].pb(y);
        v[y].pb(x);
    }
    
    dfs(1,-1);
    cout<<"Loops are : "<<cycle<<endl;
    
    printPath(n);
}
